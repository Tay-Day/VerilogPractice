$date
	Tue Dec 19 18:09:45 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module sixTBit_mux_recur_tb $end
$var wire 1 ! answer $end
$var reg 16 " inputs [15:0] $end
$var reg 4 # selectbits [3:0] $end
$scope module uut $end
$var wire 16 $ inputs [15:0] $end
$var wire 4 % selectbits [3:0] $end
$var wire 1 ! answer $end
$var parameter 32 & N $end
$scope function clog2 $end
$var integer 32 ' temp [31:0] $end
$var integer 32 ( value [31:0] $end
$upscope $end
$scope begin genblk1 $end
$var wire 1 ) rightOutput $end
$var wire 1 * leftOutput $end
$scope module internMux $end
$var wire 1 + s $end
$var wire 1 * d1 $end
$var wire 1 ) d0 $end
$var wire 1 ! answer $end
$upscope $end
$scope module muxLeft $end
$var wire 8 , inputs [7:0] $end
$var wire 3 - selectbits [2:0] $end
$var wire 1 * answer $end
$var parameter 32 . N $end
$scope function clog2 $end
$var integer 32 / temp [31:0] $end
$var integer 32 0 value [31:0] $end
$upscope $end
$scope begin genblk1 $end
$var wire 1 1 rightOutput $end
$var wire 1 2 leftOutput $end
$scope module internMux $end
$var wire 1 3 s $end
$var wire 1 2 d1 $end
$var wire 1 1 d0 $end
$var wire 1 * answer $end
$upscope $end
$scope module muxLeft $end
$var wire 4 4 inputs [3:0] $end
$var wire 2 5 selectbits [1:0] $end
$var wire 1 2 answer $end
$var parameter 32 6 N $end
$scope function clog2 $end
$var integer 32 7 temp [31:0] $end
$var integer 32 8 value [31:0] $end
$upscope $end
$scope begin genblk1 $end
$var wire 1 9 rightOutput $end
$var wire 1 : leftOutput $end
$scope module internMux $end
$var wire 1 ; s $end
$var wire 1 : d1 $end
$var wire 1 9 d0 $end
$var wire 1 2 answer $end
$upscope $end
$scope module muxLeft $end
$var wire 2 < inputs [1:0] $end
$var wire 1 = selectbits $end
$var wire 1 : answer $end
$var parameter 32 > N $end
$scope function clog2 $end
$var integer 32 ? temp [31:0] $end
$var integer 32 @ value [31:0] $end
$upscope $end
$scope begin genblk1 $end
$scope module baseMux $end
$var wire 1 A d0 $end
$var wire 1 B d1 $end
$var wire 1 = s $end
$var wire 1 : answer $end
$upscope $end
$upscope $end
$upscope $end
$scope module muxRight $end
$var wire 2 C inputs [1:0] $end
$var wire 1 D selectbits $end
$var wire 1 9 answer $end
$var parameter 32 E N $end
$scope function clog2 $end
$var integer 32 F temp [31:0] $end
$var integer 32 G value [31:0] $end
$upscope $end
$scope begin genblk1 $end
$scope module baseMux $end
$var wire 1 H d0 $end
$var wire 1 I d1 $end
$var wire 1 D s $end
$var wire 1 9 answer $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module muxRight $end
$var wire 4 J inputs [3:0] $end
$var wire 2 K selectbits [1:0] $end
$var wire 1 1 answer $end
$var parameter 32 L N $end
$scope function clog2 $end
$var integer 32 M temp [31:0] $end
$var integer 32 N value [31:0] $end
$upscope $end
$scope begin genblk1 $end
$var wire 1 O rightOutput $end
$var wire 1 P leftOutput $end
$scope module internMux $end
$var wire 1 Q s $end
$var wire 1 P d1 $end
$var wire 1 O d0 $end
$var wire 1 1 answer $end
$upscope $end
$scope module muxLeft $end
$var wire 2 R inputs [1:0] $end
$var wire 1 S selectbits $end
$var wire 1 P answer $end
$var parameter 32 T N $end
$scope function clog2 $end
$var integer 32 U temp [31:0] $end
$var integer 32 V value [31:0] $end
$upscope $end
$scope begin genblk1 $end
$scope module baseMux $end
$var wire 1 W d0 $end
$var wire 1 X d1 $end
$var wire 1 S s $end
$var wire 1 P answer $end
$upscope $end
$upscope $end
$upscope $end
$scope module muxRight $end
$var wire 2 Y inputs [1:0] $end
$var wire 1 Z selectbits $end
$var wire 1 O answer $end
$var parameter 32 [ N $end
$scope function clog2 $end
$var integer 32 \ temp [31:0] $end
$var integer 32 ] value [31:0] $end
$upscope $end
$scope begin genblk1 $end
$scope module baseMux $end
$var wire 1 ^ d0 $end
$var wire 1 _ d1 $end
$var wire 1 Z s $end
$var wire 1 O answer $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module muxRight $end
$var wire 8 ` inputs [7:0] $end
$var wire 3 a selectbits [2:0] $end
$var wire 1 ) answer $end
$var parameter 32 b N $end
$scope function clog2 $end
$var integer 32 c temp [31:0] $end
$var integer 32 d value [31:0] $end
$upscope $end
$scope begin genblk1 $end
$var wire 1 e rightOutput $end
$var wire 1 f leftOutput $end
$scope module internMux $end
$var wire 1 g s $end
$var wire 1 f d1 $end
$var wire 1 e d0 $end
$var wire 1 ) answer $end
$upscope $end
$scope module muxLeft $end
$var wire 4 h inputs [3:0] $end
$var wire 2 i selectbits [1:0] $end
$var wire 1 f answer $end
$var parameter 32 j N $end
$scope function clog2 $end
$var integer 32 k temp [31:0] $end
$var integer 32 l value [31:0] $end
$upscope $end
$scope begin genblk1 $end
$var wire 1 m rightOutput $end
$var wire 1 n leftOutput $end
$scope module internMux $end
$var wire 1 o s $end
$var wire 1 n d1 $end
$var wire 1 m d0 $end
$var wire 1 f answer $end
$upscope $end
$scope module muxLeft $end
$var wire 2 p inputs [1:0] $end
$var wire 1 q selectbits $end
$var wire 1 n answer $end
$var parameter 32 r N $end
$scope function clog2 $end
$var integer 32 s temp [31:0] $end
$var integer 32 t value [31:0] $end
$upscope $end
$scope begin genblk1 $end
$scope module baseMux $end
$var wire 1 u d0 $end
$var wire 1 v d1 $end
$var wire 1 q s $end
$var wire 1 n answer $end
$upscope $end
$upscope $end
$upscope $end
$scope module muxRight $end
$var wire 2 w inputs [1:0] $end
$var wire 1 x selectbits $end
$var wire 1 m answer $end
$var parameter 32 y N $end
$scope function clog2 $end
$var integer 32 z temp [31:0] $end
$var integer 32 { value [31:0] $end
$upscope $end
$scope begin genblk1 $end
$scope module baseMux $end
$var wire 1 | d0 $end
$var wire 1 } d1 $end
$var wire 1 x s $end
$var wire 1 m answer $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module muxRight $end
$var wire 4 ~ inputs [3:0] $end
$var wire 2 !" selectbits [1:0] $end
$var wire 1 e answer $end
$var parameter 32 "" N $end
$scope function clog2 $end
$var integer 32 #" temp [31:0] $end
$var integer 32 $" value [31:0] $end
$upscope $end
$scope begin genblk1 $end
$var wire 1 %" rightOutput $end
$var wire 1 &" leftOutput $end
$scope module internMux $end
$var wire 1 '" s $end
$var wire 1 &" d1 $end
$var wire 1 %" d0 $end
$var wire 1 e answer $end
$upscope $end
$scope module muxLeft $end
$var wire 2 (" inputs [1:0] $end
$var wire 1 )" selectbits $end
$var wire 1 &" answer $end
$var parameter 32 *" N $end
$scope function clog2 $end
$var integer 32 +" temp [31:0] $end
$var integer 32 ," value [31:0] $end
$upscope $end
$scope begin genblk1 $end
$scope module baseMux $end
$var wire 1 -" d0 $end
$var wire 1 ." d1 $end
$var wire 1 )" s $end
$var wire 1 &" answer $end
$upscope $end
$upscope $end
$upscope $end
$scope module muxRight $end
$var wire 2 /" inputs [1:0] $end
$var wire 1 0" selectbits $end
$var wire 1 %" answer $end
$var parameter 32 1" N $end
$scope function clog2 $end
$var integer 32 2" temp [31:0] $end
$var integer 32 3" value [31:0] $end
$upscope $end
$scope begin genblk1 $end
$scope module baseMux $end
$var wire 1 4" d0 $end
$var wire 1 5" d1 $end
$var wire 1 0" s $end
$var wire 1 %" answer $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10 1"
b10 *"
b100 ""
b10 y
b10 r
b100 j
b1000 b
b10 [
b10 T
b100 L
b10 E
b10 >
b100 6
b1000 .
b10000 &
$end
#0
$dumpvars
05"
04"
bx 3"
bx 2"
10"
b0 /"
0."
0-"
bx ,"
bx +"
1)"
b0 ("
1'"
0&"
0%"
bx $"
bx #"
b11 !"
b0 ~
0}
0|
bx {
bx z
1x
b0 w
0v
0u
bx t
bx s
1q
b0 p
1o
0n
0m
bx l
bx k
b11 i
b0 h
1g
0f
0e
bx d
bx c
b111 a
b0 `
0_
0^
bx ]
bx \
1Z
b0 Y
0X
0W
bx V
bx U
1S
b0 R
1Q
0P
0O
bx N
bx M
b11 K
b0 J
0I
0H
bx G
bx F
1D
b0 C
1B
0A
bx @
bx ?
1=
b10 <
1;
1:
09
bx 8
bx 7
b11 5
b1000 4
13
12
01
bx 0
bx /
b111 -
b10000000 ,
1+
1*
0)
bx (
bx '
b1111 %
b1000000000000000 $
b1111 #
b1000000000000000 "
1!
$end
#20
1A
0B
0=
0D
0S
0Z
0q
0x
0)"
00"
b1 <
b10 5
b10 K
b10 i
b10 !"
b100 4
b110 -
b110 a
b1000000 ,
b1110 #
b1110 %
b100000000000000 "
b100000000000000 $
#40
02
11
0:
1P
1!
0A
1X
1=
1D
1S
1Z
1*
1q
1x
1)"
10"
b0 <
b10 R
b11 5
b11 K
03
b11 i
b11 !"
0g
b0 4
b1000 J
b11 -
b11 a
b1000 ,
b1011 #
b1011 %
b100000000000 "
b100000000000 $
#60
1)
01
1f
0P
1n
0X
1v
0*
b0 R
b10 p
13
1g
1!
b0 J
b1000 h
b111 -
b111 a
0+
b0 ,
b10000000 `
b111 #
b111 %
b10000000 "
b10000000 $
#80
1*
11
0f
1P
0n
1W
0v
0=
0D
0S
0Z
0q
0x
0)"
00"
0)
b1 R
b0 p
b10 5
b10 K
03
b10 i
b10 !"
0g
1!
b100 J
b0 h
b10 -
b10 a
1+
b100 ,
b0 `
b1010 #
b1010 %
b10000000000 "
b10000000000 $
#100
1)
0*
1e
0P
01
1%"
0W
15"
1=
1D
0;
1S
1Z
0Q
1q
1x
0o
1)"
10"
0'"
b0 R
b10 /"
b1 5
b1 K
b1 i
b1 !"
1!
b0 J
b10 ~
b1 -
b1 a
0+
b0 ,
b10 `
b1 #
b1 %
b10 "
b10 $
#120
1!
1)
1&"
0%"
1e
1."
05"
1;
1Q
1o
1'"
b10 ("
b0 /"
b11 5
b11 K
b11 i
b11 !"
b1000 ~
b11 -
b11 a
b1000 `
b11 #
b11 %
b1000 "
b1000 $
#140
1!
1)
0&"
1%"
1e
0."
14"
0=
0D
0;
0S
0Z
0Q
0q
0x
0o
0)"
00"
0'"
b0 ("
b1 /"
b0 5
b0 K
b0 i
b0 !"
b1 ~
b0 -
b0 a
b1 `
b0 #
b0 %
b1 "
b1 $
#160
